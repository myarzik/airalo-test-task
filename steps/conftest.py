import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.firefox.service import Service as FirefoxService
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from utils.logger import Logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–æ–≥–≥–µ—Ä


def pytest_addoption(parser):
    """ –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ """
    parser.addoption("--browser", action="store", default="chrome", choices=["chrome", "firefox"], help="–í—ã–±–æ—Ä –±—Ä–∞—É–∑–µ—Ä–∞")
    parser.addoption("--headless", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ headless-—Ä–µ–∂–∏–º–µ")


@pytest.fixture(scope="session", autouse=True)
def setup_logger():
    """ üî• –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) """
    global log_instance
    log_instance = Logger(log_file="../logs/debug_log.log", level="INFO").get_logger()

@pytest.fixture(scope="session")
def driver(request):
    """ –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è Selenium WebDriver """
    browser = request.config.getoption("--browser")
    headless = request.config.getoption("--headless")

    if browser == "chrome":
        options = webdriver.ChromeOptions()
        if headless:
            options.add_argument("--headless")
        service = ChromeService(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)

    elif browser == "firefox":
        options = webdriver.FirefoxOptions()
        if headless:
            options.add_argument("--headless")
        service = FirefoxService(GeckoDriverManager().install())
        driver = webdriver.Firefox(service=service, options=options)

    else:
        raise ValueError(f"Unsupported browser: {browser}")

    yield driver
    driver.quit()

@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ """
    outcome = yield
    report = outcome.get_result()
    if report.failed and "driver" in item.funcargs:
        driver = item.funcargs["driver"]
        driver.save_screenshot(f"screenshots/{item.name}.png")

