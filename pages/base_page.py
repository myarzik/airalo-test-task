from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from utils.logger import log_instance  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

class BasePage:
    def __init__(self, driver):
        self.driver = driver
        self.wait = WebDriverWait(driver, 10)

    def safe_execute(self, action, *args, **kwargs):
        """ üî• –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ """
        try:
            return action(*args, **kwargs)
        except Exception as e:
            log_instance.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ {action.__name__}: {e}")
            self.save_screenshot(action.__name__)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            raise e  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

    def save_screenshot(self, method_name):
        """ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ """
        screenshot_path = f"screenshots/{method_name}.png"
        self.driver.save_screenshot(screenshot_path)
        log_instance.error(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")

    def open_url(self, url):
        """ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫—É–∫–∏, –µ—Å–ª–∏ –ø–æ–ø–∞–ø –ø–æ—è–≤–∏–ª—Å—è """
        log_instance.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        self.safe_execute(self.driver.get, url)
        self.accept_cookies()  # üî• –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø
        self.decline_notifications()

    def click(self, locator):
        """ –ö–ª–∏–∫–∞–µ—Ç –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç """
        log_instance.info(f"–ö–ª–∏–∫–∞–µ–º –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç: {locator}")
        self.safe_execute(self.wait.until(EC.element_to_be_clickable(locator)).click)

    def fill(self, locator, text):
        """ –í–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ """
        log_instance.info(f"–í–≤–æ–¥–∏–º '{text}' –≤ –ø–æ–ª–µ {locator}")
        self.safe_execute(self.wait.until(EC.presence_of_element_located(locator)).send_keys, text)

    def wait_for_element(self, locator):
        """ –ñ–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ """
        log_instance.info(f"–û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞: {locator}")
        return self.safe_execute(self.wait.until, EC.presence_of_element_located(locator))

    def get_text(self, locator):
        """ üî• –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω """
        element = self.wait.until(EC.presence_of_element_located(locator))
        text = element.text.strip()
        log_instance.info(f"üîπ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç {locator}: '{text}'")
        return text

    def accept_cookies(self):
        """ üî• –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø —Å –∫—É–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å """
        try:
            cookie_button = self.wait.until(
                EC.element_to_be_clickable((By.ID, "onetrust-accept-btn-handler"))
            )
            log_instance.info("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ø–∞–ø —Å –∫—É–∫–∞–º–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ")
            cookie_button.click()
        except:
            log_instance.info("‚úÖ –ü–æ–ø–∞–ø —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç")

    def decline_notifications(self):
        """ üî• –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ø–∞–ø —Å –∫—É–∫–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å """
        try:
            forbid_notifications_button = self.wait.until(
                EC.element_to_be_clickable((By.ID, "wzrk-cancel"))
            )
            log_instance.info("üü¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ø–∞–ø —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ")
            forbid_notifications_button.click()
        except:
            log_instance.info("‚úÖ –ü–æ–ø–∞–ø —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç")